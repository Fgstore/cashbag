version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taxpro_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: taxpro_accounting
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: taxpro_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - taxpro_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taxpro_accounting"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taxpro_redis
    restart: unless-stopped
    command: redis-server --requirepass taxpro_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - taxpro_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: taxpro_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taxpro_accounting
      DB_USER: postgres
      DB_PASSWORD: taxpro_password_2024
      DB_DIALECT: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: taxpro_redis_2024
      JWT_SECRET: super_secret_jwt_key_for_production_change_this
      JWT_EXPIRE: 7d
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX_REQUESTS: 100
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - taxpro_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: taxpro_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_URL: http://localhost:5000/api/v1
      REACT_APP_ENVIRONMENT: production
    ports:
      - "3000:80"
    networks:
      - taxpro_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: taxpro_nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - taxpro_network

  # Database Migration Service
  migration:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: taxpro_migration
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taxpro_accounting
      DB_USER: postgres
      DB_PASSWORD: taxpro_password_2024
      DB_DIALECT: postgres
    command: ["npm", "run", "migrate"]
    networks:
      - taxpro_network
    restart: "no"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: taxpro_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - taxpro_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: taxpro_grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: taxpro_grafana_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - taxpro_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  taxpro_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 